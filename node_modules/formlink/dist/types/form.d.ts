import { AxiosInstance, AxiosProgressEvent, AxiosResponse, CancelTokenSource } from 'axios';
import { Form as IForm } from './types/form';
import { NestedFormData } from './types/form-data';
import { FormDataConvertible } from './types/form-data-convertible';
import { FormOptions } from './types/form-options';
import { Method } from './types/method';
import { Progress } from './types/progress';
import { ValidationRules } from './types/validation';
/**
 * The Form class provides a simple way to manage form state and submission.
 * @template TForm - The type of form data.
 */
export declare class Form<TForm extends NestedFormData<TForm>> implements IForm<TForm> {
    [key: string]: any;
    data: TForm;
    errors: Partial<Record<keyof TForm | 'formError', string>>;
    processing: boolean;
    progress: Progress | null;
    wasSuccessful: boolean;
    recentlySuccessful: boolean;
    isDirty: boolean;
    rules: ValidationRules<TForm>;
    protected defaults: TForm;
    protected transformCallback: ((data: TForm) => object) | null;
    protected cancelTokenSource: CancelTokenSource | null;
    protected axiosInstance: AxiosInstance;
    protected timeouts: number[];
    /**
     * Create a new form instance.
     * @param {TForm} initialData - The initial form data.
     * @param {AxiosInstance} [axiosInstance=axios] - The Axios instance to use for requests.
     */
    constructor(initialData: TForm, axiosInstance?: AxiosInstance);
    /**
     * Create a proxy for the form instance to allow for dynamic property access.
     * @param {Form<TForm>} instance - The form instance.
     * @returns {Form<TForm>} The proxied form instance.
     */
    protected createProxy(instance: Form<TForm>): Form<TForm>;
    /**
     * Set a specific error for a form field.
     * @param {keyof TForm} field - The form field.
     * @param {string} message - The error message.
     * @returns {void}
     */
    setError(field: keyof TForm, message: string): void;
    /**
     * Set multiple errors for the form.
     * @param {Partial<Record<keyof TForm, string>>} errors - The form errors.
     * @returns {void}
     */
    setErrors(errors: Partial<Record<keyof TForm | 'formError', string>>): void;
    /**
     * Clear all form errors.
     * @returns {void}
     */
    clearErrors(): void;
    /**
     * Reset form data to defaults. You can optionally reset specific fields.
     * @param {...(keyof TForm)[]} fields - The fields to reset.
     * @returns {void}
     */
    reset(...fields: (keyof TForm)[]): void;
    /**
     * Set new default values for the form.
     * @param {keyof TForm | Partial<TForm>} [fieldOrFields] - The field or fields to set as defaults.
     * @param {FormDataConvertible} [value] - The value to set for the field.
     * @returns {void}
     */
    setDefaults(fieldOrFields?: keyof TForm | Partial<TForm>, value?: FormDataConvertible): void;
    /**
     * Apply a transformation to the form data before submission.
     * @param {(data: TForm) => object} callback - The transformation callback.
     * @returns {this} The form instance.
     */
    transform(callback: (data: TForm) => object): this;
    /**
     * Submit the form with the specified method and URL using Axios.
     * @param {Method} method - The HTTP method.
     * @param {string} url - The URL to submit to.
     * @param {Partial<FormOptions<TForm>>} [options] - The form options.
     * @returns {Promise<void>} A promise that resolves when the form is submitted.
     */
    submit(method: Method, url: string, options?: Partial<FormOptions<TForm>>): Promise<void>;
    /**
     * Update the progress based on the Axios progress event.
     * @param {ProgressEvent} event - The Axios progress event.
     * @param {Partial<FormOptions<TForm>>} [options] - The form options.
     * @returns {void}
     */
    protected updateProgress(event: AxiosProgressEvent, options?: Partial<FormOptions<TForm>>): void;
    /**
     * Handle the success response from the Axios request.
     * @param {AxiosResponse} response - The Axios response object.
     * @param {Partial<FormOptions<TForm>>} [options] - The form options.
     * @returns {void}
     */
    protected handleSuccess(response: AxiosResponse, options?: Partial<FormOptions<TForm>>): void;
    /**
     * Handle an error response from an Axios request.
     * @param {unknown} error - The error object.
     * @param {Partial<FormOptions<TForm>>} [options] - The form options.
     * @returns {void}
     */
    protected handleError(error: unknown, options?: Partial<FormOptions<TForm>>): void;
    /**
     * Submit the form with a GET request.
     * @param {string} url - The URL to submit to.
     * @param {Partial<FormOptions<TForm>>} [options] - The form options.
     * @returns {Promise<void>} A promise that resolves when the form is submitted.
     */
    get(url: string, options?: Partial<FormOptions<TForm>>): Promise<void>;
    /**
     * Submit the form with a POST request.
     * @param {string} url - The URL to submit to.
     * @param {Partial<FormOptions<TForm>>} [options] - The form options.
     * @returns {Promise<void>} A promise that resolves when the form is submitted.
     */
    post(url: string, options?: Partial<FormOptions<TForm>>): Promise<void>;
    /**
     * Submit the form with a PUT request.
     * @param {string} url - The URL to submit to.
     * @param {Partial<FormOptions<TForm>>} [options] - The form options.
     * @returns {Promise<void>} A promise that resolves when the form is submitted.
     */
    put(url: string, options?: Partial<FormOptions<TForm>>): Promise<void>;
    /**
     * Submit the form with a PATCH request.
     * @param {string} url - The URL to submit to.
     * @param {Partial<FormOptions<TForm>>} [options] - The form options.
     * @returns {Promise<void>} A promise that resolves when the form is submitted.
     */
    patch(url: string, options?: Partial<FormOptions<TForm>>): Promise<void>;
    /**
     * Submit the form with a DELETE request.
     * @param {string} url - The URL to submit to.
     * @param {Partial<FormOptions<TForm>>} [options] - The form options.
     * @returns {Promise<void>} A promise that resolves when the form is submitted.
     */
    delete(url: string, options?: Partial<FormOptions<TForm>>): Promise<void>;
    /**
     * Submit the form with an OPTIONS request.
     * @param {string} url - The URL to submit to.
     * @param {Partial<FormOptions<TForm>>} [options] - The form options.
     * @returns {Promise<void>} A promise that resolves when the form is submitted.
     */
    options(url: string, options?: Partial<FormOptions<TForm>>): Promise<void>;
    /**
     * Submit the form with the specified method and URL using Axios, debounced.
     * @param {Method} method - The HTTP method.
     * @param {string} url - The URL to submit to.
     * @param {Partial<FormOptions<TForm>>} [options] - The form options.
     * @returns {void}
     */
    submitDebounced(method: Method, url: string, options?: Partial<FormOptions<TForm>>): void;
    /**
     * Submit the form with the specified method and URL using Axios, debounced.
     * @param {Method} method - The HTTP method.
     * @param {string} url - The URL to submit to.
     * @param {Partial<FormOptions<TForm>>} [options] - The form options.
     * @returns {void}
     */
    protected debouncedSubmit: import("lodash").DebouncedFunc<(method: Method, url: string, options?: Partial<FormOptions<TForm>>) => Promise<void>>;
    /**
     * Validate the form data against the defined rules.
     * @returns {Promise<boolean>} A promise that resolves with a boolean indicating if the form is valid.
     */
    validate(): Promise<boolean>;
    /**
     * Cancel a form submission in progress.
     * @returns {void}
     */
    cancel(): void;
    /**
     * Clear all timeouts set by the form.
     * @returns {void}
     */
    protected clearTimeouts(): void;
    /**
     * Mark the form as recently successful for a short duration (e.g., 2 seconds).
     * @param {number} [timeout=2000] - The duration in milliseconds.
     * @returns {void}
     */
    protected markRecentlySuccessful(timeout?: number): void;
    /**
     * Clear all timeouts and reset the form instance.
     * @returns {void}
     */
    dispose(): void;
}
