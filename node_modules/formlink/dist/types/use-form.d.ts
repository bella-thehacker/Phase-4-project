import { Form } from './form';
/**
 * useForm composable for managing form state and submissions.
 * @param {TForm} initialData - The initial form data.
 * @returns {object} Reactive form state and methods.
 */
export declare function useForm<TForm extends Record<string, any>>(initialData: TForm): {
    [x: string]: any;
    data: import("vue").UnwrapRef<TForm>;
    errors: import("vue").UnwrapRef<Partial<Record<"formError" | keyof TForm, string>>>;
    processing: boolean;
    progress: {
        percentage: number;
        loaded: number;
        total?: number | undefined;
        progress?: number | undefined;
        bytes: number;
        rate?: number | undefined;
        estimated?: number | undefined;
        upload?: boolean | undefined;
        download?: boolean | undefined;
        event?: any;
        lengthComputable: boolean;
    } | null;
    wasSuccessful: boolean;
    recentlySuccessful: boolean;
    isDirty: boolean;
    rules: import("vue").UnwrapRef<import("./types/validation").ValidationRules<TForm>>;
    setError: (field: keyof TForm, message: string) => void;
    setErrors: (errors: Partial<Record<"formError" | keyof TForm, string>>) => void;
    clearErrors: () => void;
    reset: (...fields: (keyof TForm)[]) => void;
    setDefaults: (fieldOrFields?: keyof TForm | Partial<TForm> | undefined, value?: import("./types/form-data-convertible").FormDataConvertible) => void;
    transform: (callback: (data: TForm) => object) => Form<TForm>;
    submit: (method: import("./types/method").Method, url: string, options?: Partial<import("./types/form-options").FormOptions<TForm>> | undefined) => Promise<void>;
    get: (url: string, options?: Partial<import("./types/form-options").FormOptions<TForm>> | undefined) => Promise<void>;
    post: (url: string, options?: Partial<import("./types/form-options").FormOptions<TForm>> | undefined) => Promise<void>;
    put: (url: string, options?: Partial<import("./types/form-options").FormOptions<TForm>> | undefined) => Promise<void>;
    patch: (url: string, options?: Partial<import("./types/form-options").FormOptions<TForm>> | undefined) => Promise<void>;
    delete: (url: string, options?: Partial<import("./types/form-options").FormOptions<TForm>> | undefined) => Promise<void>;
    options: (url: string, options?: Partial<import("./types/form-options").FormOptions<TForm>> | undefined) => Promise<void>;
    submitDebounced: (method: import("./types/method").Method, url: string, options?: Partial<import("./types/form-options").FormOptions<TForm>> | undefined) => void;
    validate: () => Promise<boolean>;
    cancel: () => void;
    dispose: () => void;
};
